name: "management cluster terraform plan on hcloud"

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      var_file:
        required: true
        type: string
      prefix:
        required: true
        type: string
      environment:
        required: true
        type: string
      github_repository:
        type: string
        default: ${{ github.repository }}
      github_ref:
        type: string
        default: ${{ github.sha }}
    secrets:
      tf_api_token:
        required: true
      hcloud_secret:
        required: true
      hcloud_ssh_key_private:
        required: true
      hcloud_ssh_key_public:
        required: true

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.github_repository }}
          ref: ${{ inputs.github_ref }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.tf_api_token }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: TF_WORKSPACE=fallback terraform init -input=false

      # Selecting correct workspace (and create if not exist)
      - name: Terraform Workspace Select
        run: terraform workspace select ${{ inputs.workspace }} || terraform workspace new ${{ inputs.workspace }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          terraform plan -var-file=${{ inputs.var_file }} \
            -var prefix="${{ inputs.prefix }}" \
            -var hcloud_secret="${{ secrets.hcloud_secret }}" \
            -var hcloud_ssh_key_private="${{ secrets.hcloud_ssh_key_private }}" \
            -var hcloud_ssh_key_public="${{ secrets.hcloud_ssh_key_public }}" \
            -no-color

          echo "::set-output name=terraform-plan::$(cat plan.out)"
        id: run_plan

      - name: Send plan to PR
        uses: thollander/actions-comment-pull-request@v1.1.0
        with:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          message: |
            ```bash
            ${{join(steps.run_plan.outputs.*, '\n')}}
            ```
